str(mtcars)
sink()
# Export the summary() of the entire data frame mtcars to a text file summary-mtcars.txt
sink(file = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/summary-mtcars.txt")
summary(mtcars)
sink()
# Use png to save scatterplot of mpg and wt with plot
png(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/scatterplot-mpg-wt.png")
plot(mtcars$mpg, mtcars$wt, pch = 20,
xlab = 'Miles per Gallon', ylab = 'Weight (1000lbs)')
dev.off()
# Use png() to save a scatterplot of hp and wt with plot()
png(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/scatterplot-hp-wt.png", res = 100)
plot(mtcars$hp, mtcars$wt, pch = 20,
xlab = 'Miles per Gallon', ylab = 'Weight (1000lbs)')
dev.off()
# Save a histogram in JPEG format of mpg with dimensions (width x height) 600 x 400 pixels
png(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/histogram-mpg.jpeg",
width = 600, height = 400)
hist(mtcars$mpg)
dev.off()
# Use pdf() to save the previous histogram of age in PDF format, with dimensions (width x height) 7 x 5 inches
pdf(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/histogram-mpg.jpeg",
width = 7, height = 5)
# Example 1
write.csv(
x = mtcars, # R object to be exported
file = '/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/exports.csv'  # file path
)
# Export dataframe with mpg, disp, and hp to a csv file dataset.csv in exports dir
sink(file = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/dataset.csv")
mtcars[, c('mpg', 'disp', 'hp')]
sink()
# Export the output of str() on mtcars to a text file called mtcars-structure.txt
sink(file = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/mtcars-structure.txt")
str(mtcars)
sink()
# Export the summary() of the entire data frame mtcars to a text file summary-mtcars.txt
sink(file = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/summary-mtcars.txt")
summary(mtcars)
sink()
# Use png to save scatterplot of mpg and wt with plot
png(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/scatterplot-mpg-wt.png")
plot(mtcars$mpg, mtcars$wt, pch = 20,
xlab = 'Miles per Gallon', ylab = 'Weight (1000lbs)')
dev.off()
# Use png() to save a scatterplot of hp and wt with plot()
png(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/scatterplot-hp-wt.png", res = 100)
plot(mtcars$hp, mtcars$wt, pch = 20,
xlab = 'Miles per Gallon', ylab = 'Weight (1000lbs)')
dev.off()
# Save a histogram in JPEG format of mpg with dimensions (width x height) 600 x 400 pixels
png(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/histogram-mpg.jpeg",
width = 600, height = 400)
hist(mtcars$mpg)
dev.off()
# Use pdf() to save the previous histogram of age in PDF format, with dimensions (width x height) 7 x 5 inches
pdf(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/histogram-mpg.pdf",
width = 7, height = 5)
# Example 1
write.csv(
x = mtcars, # R object to be exported
file = '/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/exports.csv'  # file path
)
# Export dataframe with mpg, disp, and hp to a csv file dataset.csv in exports dir
sink(file = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/dataset.csv")
mtcars[, c('mpg', 'disp', 'hp')]
sink()
# Export the output of str() on mtcars to a text file called mtcars-structure.txt
sink(file = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/mtcars-structure.txt")
str(mtcars)
sink()
# Export the summary() of the entire data frame mtcars to a text file summary-mtcars.txt
sink(file = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/summary-mtcars.txt")
summary(mtcars)
sink()
# Use png to save scatterplot of mpg and wt with plot
png(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/scatterplot-mpg-wt.png")
plot(mtcars$mpg, mtcars$wt, pch = 20,
xlab = 'Miles per Gallon', ylab = 'Weight (1000lbs)')
dev.off()
# Use png() to save a scatterplot of hp and wt with plot()
png(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/scatterplot-hp-wt.png", res = 100)
plot(mtcars$hp, mtcars$wt, pch = 20,
xlab = 'Miles per Gallon', ylab = 'Weight (1000lbs)')
dev.off()
# Save a histogram in JPEG format of mpg with dimensions (width x height) 600 x 400 pixels
png(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/histogram-mpg.jpeg",
width = 600, height = 400)
hist(mtcars$mpg)
dev.off()
# Use pdf() to save the previous histogram of age in PDF format, with dimensions (width x height) 7 x 5 inches
pdf(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/histogram-mpg.pdf", width = 7, height = 5)
# Example 1
write.csv(
x = mtcars, # R object to be exported
file = '/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/exports.csv'  # file path
)
# Export dataframe with mpg, disp, and hp to a csv file dataset.csv in exports dir
sink(file = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/dataset.csv")
mtcars[, c('mpg', 'disp', 'hp')]
sink()
# Export the output of str() on mtcars to a text file called mtcars-structure.txt
sink(file = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/mtcars-structure.txt")
str(mtcars)
sink()
# Export the summary() of the entire data frame mtcars to a text file summary-mtcars.txt
sink(file = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/summary-mtcars.txt")
summary(mtcars)
sink()
# Use png to save scatterplot of mpg and wt with plot
png(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/scatterplot-mpg-wt.png")
plot(mtcars$mpg, mtcars$wt, pch = 20,
xlab = 'Miles per Gallon', ylab = 'Weight (1000lbs)')
dev.off()
# Use png() to save a scatterplot of hp and wt with plot()
png(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/scatterplot-hp-wt.png", res = 100)
plot(mtcars$hp, mtcars$wt, pch = 20,
xlab = 'Miles per Gallon', ylab = 'Weight (1000lbs)')
dev.off()
# Save a histogram in JPEG format of mpg with dimensions (width x height) 600 x 400 pixels
png(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/histogram-mpg.jpeg",
width = 600, height = 400)
hist(mtcars$mpg)
dev.off()
# Use pdf() to save the previous histogram of age in PDF format, with dimensions (width x height) 7 x 5 inches
pdf(filename = "histogram-mpg.pdf", width = 7, height = 5)
# Example 1
write.csv(
x = mtcars, # R object to be exported
file = '/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/exports.csv'  # file path
)
# Export dataframe with mpg, disp, and hp to a csv file dataset.csv in exports dir
sink(file = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/dataset.csv")
mtcars[, c('mpg', 'disp', 'hp')]
sink()
# Export the output of str() on mtcars to a text file called mtcars-structure.txt
sink(file = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/mtcars-structure.txt")
str(mtcars)
sink()
# Export the summary() of the entire data frame mtcars to a text file summary-mtcars.txt
sink(file = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/summary-mtcars.txt")
summary(mtcars)
sink()
# Use png to save scatterplot of mpg and wt with plot
png(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/scatterplot-mpg-wt.png")
plot(mtcars$mpg, mtcars$wt, pch = 20,
xlab = 'Miles per Gallon', ylab = 'Weight (1000lbs)')
dev.off()
# Use png() to save a scatterplot of hp and wt with plot()
png(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/scatterplot-hp-wt.png", res = 100)
plot(mtcars$hp, mtcars$wt, pch = 20,
xlab = 'Miles per Gallon', ylab = 'Weight (1000lbs)')
dev.off()
# Save a histogram in JPEG format of mpg with dimensions (width x height) 600 x 400 pixels
png(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/histogram-mpg.jpeg",
width = 600, height = 400)
hist(mtcars$mpg)
dev.off()
# Use pdf() to save the previous histogram of age in PDF format, with dimensions (width x height) 7 x 5 inches
pdf(onefile = TRUE, filename = "histogram-mpg.pdf", width = 7, height = 5)
# Example 1
write.csv(
x = mtcars, # R object to be exported
file = '/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/exports.csv'  # file path
)
# Export dataframe with mpg, disp, and hp to a csv file dataset.csv in exports dir
sink(file = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/dataset.csv")
mtcars[, c('mpg', 'disp', 'hp')]
sink()
# Export the output of str() on mtcars to a text file called mtcars-structure.txt
sink(file = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/mtcars-structure.txt")
str(mtcars)
sink()
# Export the summary() of the entire data frame mtcars to a text file summary-mtcars.txt
sink(file = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/summary-mtcars.txt")
summary(mtcars)
sink()
# Use png to save scatterplot of mpg and wt with plot
png(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/scatterplot-mpg-wt.png")
plot(mtcars$mpg, mtcars$wt, pch = 20,
xlab = 'Miles per Gallon', ylab = 'Weight (1000lbs)')
dev.off()
# Use png() to save a scatterplot of hp and wt with plot()
png(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/scatterplot-hp-wt.png", res = 100)
plot(mtcars$hp, mtcars$wt, pch = 20,
xlab = 'Miles per Gallon', ylab = 'Weight (1000lbs)')
dev.off()
# Save a histogram in JPEG format of mpg with dimensions (width x height) 600 x 400 pixels
png(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/histogram-mpg.jpeg",
width = 600, height = 400)
hist(mtcars$mpg)
dev.off()
# Use pdf() to save the previous histogram of age in PDF format, with dimensions (width x height) 7 x 5 inches
pdf("histogram-mpg.pdf", width = 7, height = 5)
hist(mtcars$mpg)
dev.off()
# Use ggplot() to make a scatterplot of mpg and disp, and store it in a ggplot object named gg_mpg_disp
ggplot(data = mtcars, aes(x = mtcars$mpg, y = mtcars$disp)) +
geom_point()
# Example 1
write.csv(
x = mtcars, # R object to be exported
file = '/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/exports.csv'  # file path
)
# Export dataframe with mpg, disp, and hp to a csv file dataset.csv in exports dir
sink(file = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/dataset.csv")
mtcars[, c('mpg', 'disp', 'hp')]
sink()
# Export the output of str() on mtcars to a text file called mtcars-structure.txt
sink(file = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/mtcars-structure.txt")
str(mtcars)
sink()
# Export the summary() of the entire data frame mtcars to a text file summary-mtcars.txt
sink(file = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/summary-mtcars.txt")
summary(mtcars)
sink()
# Use png to save scatterplot of mpg and wt with plot
png(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/scatterplot-mpg-wt.png")
plot(mtcars$mpg, mtcars$wt, pch = 20,
xlab = 'Miles per Gallon', ylab = 'Weight (1000lbs)')
dev.off()
# Use png() to save a scatterplot of hp and wt with plot()
png(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/scatterplot-hp-wt.png", res = 100)
plot(mtcars$hp, mtcars$wt, pch = 20,
xlab = 'Miles per Gallon', ylab = 'Weight (1000lbs)')
dev.off()
# Save a histogram in JPEG format of mpg with dimensions (width x height) 600 x 400 pixels
png(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/histogram-mpg.jpeg",
width = 600, height = 400)
hist(mtcars$mpg)
dev.off()
# Use pdf() to save the previous histogram of age in PDF format, with dimensions (width x height) 7 x 5 inches
pdf("/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/histogram-mpg.pdf", width = 7, height = 5)
hist(mtcars$mpg)
dev.off()
# Use ggplot() to make a scatterplot of mpg and disp, and store it in a ggplot object named gg_mpg_disp
library(ggplot2)
ggplot(data = mtcars, aes(x = mtcars$mpg, y = mtcars$disp)) +
geom_point()
ggsave()
# Example 1
write.csv(
x = mtcars, # R object to be exported
file = '/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/exports.csv'  # file path
)
# Export dataframe with mpg, disp, and hp to a csv file dataset.csv in exports dir
sink(file = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/dataset.csv")
mtcars[, c('mpg', 'disp', 'hp')]
sink()
# Export the output of str() on mtcars to a text file called mtcars-structure.txt
sink(file = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/mtcars-structure.txt")
str(mtcars)
sink()
# Export the summary() of the entire data frame mtcars to a text file summary-mtcars.txt
sink(file = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/summary-mtcars.txt")
summary(mtcars)
sink()
# Use png to save scatterplot of mpg and wt with plot
png(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/scatterplot-mpg-wt.png")
plot(mtcars$mpg, mtcars$wt, pch = 20,
xlab = 'Miles per Gallon', ylab = 'Weight (1000lbs)')
dev.off()
# Use png() to save a scatterplot of hp and wt with plot()
png(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/scatterplot-hp-wt.png", res = 100)
plot(mtcars$hp, mtcars$wt, pch = 20,
xlab = 'Miles per Gallon', ylab = 'Weight (1000lbs)')
dev.off()
# Save a histogram in JPEG format of mpg with dimensions (width x height) 600 x 400 pixels
png(filename = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/histogram-mpg.jpeg",
width = 600, height = 400)
hist(mtcars$mpg)
dev.off()
# Use pdf() to save the previous histogram of age in PDF format, with dimensions (width x height) 7 x 5 inches
pdf("/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/histogram-mpg.pdf", width = 7, height = 5)
hist(mtcars$mpg)
dev.off()
# Use ggplot() to make a scatterplot of mpg and disp, and store it in a ggplot object named gg_mpg_disp
library(ggplot2)
gg_mpg_disp <- ggplot(data = mtcars, aes(x = mtcars$mpg, y = mtcars$disp)) +
geom_point()
ggsave(file = "/Users/grantkalasky/Berkeley/STATS133/labs/stat133-lab05/exports/scatterplot-mpg-disp.pdf",
plot = gg_mpg_disp,
width=7, height=5)
license()
help("read.table")
man("read.table")
(1:5)
c(1,2,3,4,5) * 2
1:3^2
var<-3
Var*2
x<-2
2x<-2*x
sqrt4 <- sqrt(4)
sqrt4
a number <- 16
seq(1,2,0.1)
rep(1,3,2)
rep(3, 2)
rep(1:4, 2)
rep(1:4, each = 2)
rep(1:3, each=2)
rep(1:3, 2)
help(:)
help(":")
vol <- matrix(lord, nrow=3, ncol=3)
# Creating variable vectors and factors
number <- c(30, 35, 23, 9, 11, 27, 34, 6, 3, 0)
player <- c("Stephen Curry", "Kevin Durant", "Draymond Green", "Andre Iguodala",
"Klay Thompson", "Zaza Pachulia", "Shaun Livingston", "Nick Young",
"David West", "Patrick McCaw")
position <- factor(c("PG", "PF", "PF", "SF", "SG", "C", "PG", "SG", "C", "SG"))
height <- c("6-3", "6-9", "6-7", "6-6", "6-7", "6-11", "6-7", "6-7", "6-9", "6-7")
weight <- c(190.0, 240.0, 230.0, 215.0, 215.0, 270.0, 192.0, 210.0, 250.0, 185.0)
birthdate <- c("March 14, 1988", "September 29, 1988", "March 4, 1990",
"January 28, 1984", "February 8, 1990", "February 10, 1984",
"September 11, 1985", "June 1, 1985", "August 29, 1980",
"October 25, 1995")
experience <- c(8, 10, 5, 13, 6, 14, 12, 10, 14, 1)
college <- c("Davidson College", "University of Texas at Austin",
"Michigan State University", "University of Arizona",
"Washington State University", NA, NA,
"University of Southern California,", "Xavier University",
"University of Nevada, Las Vegas")
# a - What is the name of the heaviest player
player[which.max(weight)]
# b - What is the college of the player that has a hieght of 6-6?
college[which(height == "6-6")]
# c - What is the position of the player with more years of experience
position[which.max(experience)]
# d - What is the number of the lightest player
number[which.min(weight)]
# e - Obtain frequencies (counts) of the position values
table(position)
# f - How many players have a weight larger than the average weight?
length(weight[weight > mean(weight)])
# g - How many players have between 9 and 12 years of experience (inclusive)
length(experience[experience >= 9 & experience <= 12])
# h - What is the mean years of experience of SG players
mean(experience[position == "SG"])
# i - What is the median weight of those players with a position different of C
median(weight[position != "C"])
# j - What is the first quartile of years of experience among PF and SG
quantile(experience[position == "PF" | position == "SG"])[2]
gsw <- list(
player = player,
number = number,
position = position,
weight = weight,
experience = experience
)
# a - What is the number of the heaviest player
gsw[[2]][[which.max(weight)]]
# b - What is the position of the player with less experience
gsw[[3]][[which.min(experience)]]
# c - How many players have less than 8 or more than 11 years of experience
length(gsw[[5]][experience < 8 | experience > 11])
# d - What is the third quartile of years of experience among PF and SG
quantile(gsw[[5]][position == "PF" | position == "SG"])[4]
# e - What is the name of the player whose weight is furthest from the average weight of all players
gsw[[1]][[which.max(abs(mean(weight) - weight))]]
hp <- list(
first = "Harry",
last = "Potter",
courses = c("Potions", "Enchantments", "Spells"),
sport = "quidditch",
age = 18L,
gpa = 3.9
)
# a - What is the class of hp?
class(hp)
# b - How many elements are in hp?
length(hp)
# c - What is the length of courses?
length(hp[[3]])
# d - What is the data type of the element age?
typeof(hp[[5]])
# e - What is the data type of the element gpa?
typeof(hp[[6]])
# f - If you combine age and gpa in a new vector, what is the datatype of this vector?
typeof(c(hp[[5]], hp[[6]]))
lord <- c("v", "o", "l", "d", "e", "m", "o", "r", "t")
# a - Here, the logical index TRUE returns all elements that are considered not FALSE (i.e. null values), so all elements in the vector are returned.
lord[TRUE]
# b - Here, we are trying to access the length(lord) + 1 index of the vector. However, this index is out-of-bounds for this vector and thus returns NA.
lord[length(lord) + 1]
# c - Here, we are indexing into the array starting at the last element and returning every other element until we reach the beginning of the vector, essentially moving backwards through the vector.
lord[seq(from = length(lord), to = 1, by = -2)]
# d - Here, we are returning all elements in the vector that match the logical expression within the brackets, which is all elements in lord that are "o".
lord[lord == "o"]
# e - Again, we return all elements that match the logical expression inside the brackets. In this case, we return all characters that are NOT "e" and "o".
lord[lord != "e" & lord != "o"]
# f - Here, we return elements within lord that are also found within the vector of vowels. Thus, we are only returning the vowels within the vector 'lord'.
lord[lord %in% c("a", "e", "i", "o", "u")]
# g - Here we are modifying all elements in lord to uppercase characters if they are not in the vector of vowels. In other words, all consonants in the vector 'lord' are transformed to uppercase characters.
toupper(lord[!(lord %in% c("a", "e", "i", "o", "u"))])
# h - Here, we are concatenating the 'lord' vector, and use the empty string "" to seperate the results. Thus, we get the single string "voldemort".
paste(lord, collapse = "")
# i - Here, the logical is.na(lord) is evaluated to FALSE. The logical indexing FALSE into a vector doesn't return any elements because all elements in the vector are treated as TRUE.
lord[is.na(lord)]
# j - Here, we are summing the number of elements that are considered non-null in the 'lord' vector. Since all character are non-null, we command returns 9, the number of elements in 'lord'.
sum(!is.na(lord))
vol <- matrix(lord, nrow=3, ncol=3)
# a
vol[1, ]
# b
vol[1:2, 2:1]
# c
vol[3:1, 1:3]
# d
vol[1:3, c(1, 2, 2)]
# e
vol[3:1, 3:1]
# f
vol[c(3, 2, 1, 1, 2, 3), c(3, 2, 2, 3)]
# g
vol[c(3, 2, 1, 1, 2, 3), c(1, 2, 3, 3, 2, 1)]
matrix(1:9, 4, 3, byrow=FALSE)
matrix(1:12, 4, 3, byrow=FALSE)
matrix(1:12, 4, 3)
matrix(1:12, 4, 3, byrow=TRUE)
help("getwd")
x <- c(1:10)
x[:5]
help(str)
curry <- read.csv("../data/stephen-curry.csv", stringsAsFactors = FALSE)
ls
cd ..
setwd("~/Berkeley/STATS133/workout01")
setwd("~/Berkeley/STATS133/workout01/code")
igoudala
str(igoudala)
# Add column names of players to each dataset
igoudala$name = "Andre Igoudala"
# Add column names of players to each dataset
ls()
load("~/Berkeley/STATS133/workout01/code/make-shots-data-script.R")
source('~/Berkeley/STATS133/workout01/code/make-shots-data-script.R')
curry$name = "Stephen Curry"
source('~/Berkeley/STATS133/workout01/code/make-shots-data-script.R')
curry
source('~/Berkeley/STATS133/workout01/code/make-shots-data-script.R')
summary(iguodala)
source('~/Berkeley/STATS133/workout01/code/make-shots-data-script.R')
head(iguodala)
source('~/Berkeley/STATS133/workout01/code/make-shots-data-script.R')
iguodala[iguodala$shot_made_flag == 'n'] <- "shot_no"
iguodala$shot_made_flag[iguodala$shot_made_flag == 'n'] <- "shot_no"
source('~/Berkeley/STATS133/workout01/code/make-shots-data-script.R')
head(iguodala)
source('~/Berkeley/STATS133/workout01/code/make-shots-data-script.R')
curry$shot_made_flag[curry$shot_made_flag == 'n'] <- "shot_no"
source('~/Berkeley/STATS133/workout01/code/make-shots-data-script.R')
source('~/Berkeley/STATS133/workout01/code/make-shots-data-script.R')
sink()
source('~/Berkeley/STATS133/workout01/code/make-shots-data-script.R')
# Send summary output of dataframes to text-files
summary(green)
source('~/Berkeley/STATS133/workout01/code/make-shots-data-script.R')
sink()
source('~/Berkeley/STATS133/workout01/code/make-shots-data-script.R')
summary(iguodala)
getwd()
source('~/Berkeley/STATS133/workout01/code/make-shots-data-script.R')
sink(file = "../output/stephen-curry-summary.txt", type="output")
source('~/Berkeley/STATS133/workout01/code/make-shots-data-script.R')
sink()
source('~/Berkeley/STATS133/workout01/code/make-shots-data-script.R')
print(summary(shot_data))
source('~/Berkeley/STATS133/workout01/code/make-shots-data-script.R')
source('~/Berkeley/STATS133/workout01/code/make-shot-charts-script.R')
install.packages("jpeg")
install.packages("grid")
source('~/Berkeley/STATS133/workout01/code/make-shot-charts-script.R')
source('~/Berkeley/STATS133/workout01/code/make-shot-charts-script.R')
# Creating shot charts
iguodala_shot_chart <- ggplot()
source('~/Berkeley/STATS133/workout01/code/make-shot-charts-script.R')
# Creating shot charts
iguodala_shot_chart <- ggplot(data=iguodala) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle("Shot Chart: Andre Iguodala (2016 Season)") +
theme_minimal()
source('~/Berkeley/STATS133/workout01/code/make-shot-charts-script.R')
iguodala_shot_chart <- ggplot(data=curry) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle("Shot Chart: Stephen Curry (2016 Season)") +
theme_minimal()
source('~/Berkeley/STATS133/workout01/code/make-shot-charts-script.R')
curry_shot_chart <- ggplot(data=curry) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle("Shot Chart: Stephen Curry (2016 Season)") +
theme_minimal()
print(curry_shot_chart)
source('~/Berkeley/STATS133/workout01/code/make-shot-charts-script.R')
dev.off()
source('~/Berkeley/STATS133/workout01/code/make-shot-charts-script.R')
source('~/Berkeley/STATS133/workout01/code/make-shot-charts-script.R')
dev.off()
source('~/Berkeley/STATS133/workout01/code/make-shot-charts-script.R')
source('~/Berkeley/STATS133/workout01/code/make-shot-charts-script.R')
print(facetted_shot_chart)
source('~/Berkeley/STATS133/workout01/code/make-shot-charts-script.R')
png(filename = "../images/gsw-shots-charts.png", width = 8, height = 7, units = "in", res=180)
shots_data <- read.csv(file = "../data/shots-data.csv", stringsAsFactors = FALSE)
